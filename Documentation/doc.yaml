---

- header: |+
            > **[Presentation](../README.md) | [Manual](https://github.com/julien-boudry/Condorcet/wiki) | Methods References | [Tests](../Tests)**

            # Public Methods Index _(Not yet exhaustive, not yet....)*_
            _Not including technical public methods which ones are used for very advanced use between components (typically if you extend Coondorcet or build your own modules)._    

            _*: I try to update and complete the documentation. See also [the manual](https://github.com/julien-boudry/Condorcet/wiki), [the tests](../Tests) also produce many examples. And create issues for questions or fixing documentation!_   

# MULTIPLE CLASS

- 
  class:
    - Vote
    - Candidate
  type: method
  visibility: public
  name: countLinks
  static: false
  description: |
    Count number of linked election to this object.
  return_type: int
  return: |
    (int) Number of linked elections.
  related:
    - 'Vote::countLinks'
    - 'Candidate::countLinks'
    - 'Vote::getLinks'
    - 'Candidate::getLinks'
    - 'Vote::haveLink'
    - 'Candidate::haveLink'
  publish: true

- 
  class:
    - Vote
    - Candidate
  type: method
  visibility: public
  name: getLinks
  static: false
  description: |
    Get elections object linked to this Vote or Candidate object.
  return_type: array
  return: |
    (array) Populated by each elections Condorcet object.
  related:
    - 'Vote::countLinks'
    - 'Candidate::countLinks'
    - 'Vote::getLinks'
    - 'Candidate::getLinks'
    - 'Vote::haveLink'
    - 'Candidate::haveLink'
  publish: true

- 
  class:
    - Vote
    - Candidate
  type: method
  visibility: public
  name: haveLink
  static: false
  description: |
    Check if this election is linked with this Candidate/Vote object.
  input:
    election:
      type: object CondorcetPHP\Condorcet\Condorcet
      required: true
      text: Condorcet election to check.
  return_type: bool
  return: |
    (bool) True or False.
  related:
  related:
    - 'Vote::countLinks'
    - 'Candidate::countLinks'
    - 'Vote::getLinks'
    - 'Candidate::getLinks'
    - 'Vote::haveLink'
    - 'Candidate::haveLink'

  publish: true


# CLASS CONDORCET

- 
  class: Condorcet
  type: method
  visibility: public
  name: addMethod
  static: true
  description: |
    If you create your own Condorcet Algo. You will need it !
  input:
    algo:
      type: string
      required: true
      text: |
        The class name implementing your method. The class name includes the namespace it was declared in (e.g. Foo\Bar).
  return_type: bool
  return: |
    True on Success. False on failure.
  related:
    - 'static Condorcet::isAuthMethod'
  publish: true

- 
  class: Condorcet
  type: method
  visibility: public
  name: getAuthMethods
  static: true
  description: |
    Get a list of supported algorithm.
  input:
    basic:
      type: bool
      default: false
      required: false
      text: Include the natural Condorcet base algorithm.
  return_type: array
  return: |
    *(array)* Populated by method string name. You can use it on getResult ... and others methods.
  related:
    - 'static Condorcet::isAuthMethod'
  publish: true

- 
  class: Condorcet
  type: method
  visibility: public
  name: getDefaultMethod
  static: true
  description: |
    Return the Condorcet static default method for the new Condorcet object.
  return_type: string
  return: |
    *(string)* Method name.
  related:
    - 'static Condorcet::getAuthMethods'
    - 'static Condorcet::setDefaultMethod'
  publish: true

- 
  class: Condorcet
  type: method
  visibility: public
  name: getVersion
  static: true
  description: |
    Get the library version.
  input:
    type:
      type: bool
      default: false
      required: false
      text: |
        * true will return : '2.0'
        * false will return : '2.0.0'
  return_type: string
  return: |
    *(string)* Condorcet PHP version.
  related:
    - 'Election::getObjectVersion'
  publish: true

- 
  class: Condorcet
  type: method
  visibility: public
  name: isAuthMethod
  static: true
  description: |
    Test if a method is in the result set of Condorcet::getAuthMethods.
  input:
    method:
      type: string
      required: true
  return_type: bool
  return: |
    *(bool)* True False
  related:
    - 'static Condorcet::getAuthMethods'

  publish: true

- 
  class: Condorcet
  type: method
  visibility: public
  name: setDefaultMethod
  static: true
  description: |
    Put a new static method by default for the news Condorcet objects.
  input:
    method:
      type: string
      required: true
      text: Method Name.
  return_type: bool
  return: |
    (bool) In case of success, return TRUE
  related:
    - 'static Condorcet::getDefaultMethod'
  publish: true


# CLASS ELECTION

- 
  class: Election
  type: method
  visibility: public
  name: __construct
  static: false
  description: |
    Build a new Election.
  return: |
    NULL
  publish: true

- 
  class: Election
  type: method
  visibility: public
  name: addCandidate
  static: false
  description: |
    Add one Candidate to an election.
  input:
    candidate:
      type: mixed
      default: automatic
      required: false
      text: Alphanumeric string or CondorcetPHP\Condorcet\Candidate objet. Your candidate name will be trim().
  return_type: CondorcetPHP\Condorcet\Candidate
  return: |
    The new candidate object (your or automatic one). Throw an exception on error (existing candidate...).
  related:
    - 'Election::parseCandidates'
    - 'Election::addCandidatesFromJson'
    - 'Election::removeCandidate'
    - 'Election::getCandidatesList'
    - 'Election::canAddCandidate'
  examples:
    'Manual - Manage Candidate': 'https://github.com/julien-boudry/Condorcet/wiki/II-%23-A.-Create-an-Election-%23-2.-Create-Candidates'
  publish: true

-
  class: Election
  type: method
  visibility: public
  name: addConstraint
  static: false
  description: |
    Add a constraint rules as a valid class path.
  input:
    class:
      type: string
      required: true
      text: A valid class path. Class must extend VoteConstraint class.
  return_type: bool
  return: |
    True on success. Throw CondorcetException code 27/28/29 on error.
  related:
    - 'Election::getConstraints'
    - 'Election::clearConstraints'
    - 'Election::testIfVoteIsValidUnderElectionConstraints'
  examples:
    'Manual - Vote Constraints': 'https://github.com/julien-boudry/Condorcet/wiki/II-%23-C.-Result-%23-5.-Vote-Constraints'
  publish: true


- 
  class: Election
  type: method
  visibility: public
  name: addVote
  static: false
  description: |
    Add a vote to an election.
  input:
    vote:
      type: mixed
      required: true
      text: 'String or array representation. Or CondorcetPHP\Condorcet\Vote object. If you not provide yourself Vote object, a new one will be generate for you. '
    tags:
      type: mixed
      default: 'null'
      required: false
      text: String separated by commas or an array. Will add tags to the vote object for you. But you can too add it yourself to Vote object.
  return_type: \CondorcetPHP\Condorcet\Vote
  return: |
    The vote object.
  related:
    - 'Election::parseVotes'
    - 'Election::addVotesFromJson'
    - 'Election::removeVote'
    - 'Election::getVotesList'

  examples:
    'Manual - Vote Management': 'https://github.com/julien-boudry/Condorcet/wiki/II-%23-B.-Vote-management-%23-1.-Add-Vote'
  publish: true

- 
  class: Election
  type: method
  visibility: public
  name: allowVoteWeight
  static: false
  description: |
    Set the setting and reset all result data.
    Then the weight of votes (if specified) will be taken into account when calculating the results. Otherwise all votes will be considered equal.
    By default, the voting weight is not activated and all votes are considered equal. 
  input:
    rule:
      type: bool
      default: true
      required: true
      text: New rule.
  return_type: bool
  return: |
    Return True
  related:
    - 'Election::isVoteWeightAllowed'
  publish: true

- 
  class: Election
  type: method
  visibility: public
  name: canAddCandidate
  static: false
  description: |
    Check if a Candidate is alredeay register. User strict Vote object comparaison, but also string namming comparaison into the election.
  input:
    candidate:
      type: mixed
      required: true
      text : String or Condorcet/Vote object.
  return_type: bool
  return: |
    True if your Candidate is available. Or False.
  related:
    - 'Election::addCandidate'
  publish: true

-
  class: Election
  type: method
  visibility: public
  name: clearConstraints
  static: false
  description: |
    Clear all constraints rules and clear previous results.
  return_type: bool
  return: |
    Return True.
  related:
    - 'Election::getConstraints'
    - 'Election::addConstraints'
    - 'Election::testIfVoteIsValidUnderElectionConstraints'
  examples:
    'Manual - Vote Constraints': 'https://github.com/julien-boudry/Condorcet/wiki/II-%23-C.-Result-%23-5.-Vote-Constraints'
  publish: true

- 
  class: Election
  type: method
  visibility: public
  name: countCandidates
  static: false
  description: |
    Count the number of registered candidate
  return_type: int
  return: |
    (int) Number of registered candidate for this election.
  related:
    - 'Election::getCandidatesList'
  publish: true

- 
  class: Election
  type: method
  visibility: public
  name: countVotes
  static: false
  description: |
    Count the number of actual registered and valid vote for this election. This method ignore votes constraints, only valid vote will be counted.
  input:
    tag:
      type: mixed
      default: 'null'
      required: false
      text: 'Tag into string separated by commas, or an Array.'
    with:
      type: bool
      default: true
      required: false
      text: Count Votes with this tag ou without this tag.
  return_type: int
  return: |
    (int) Number of valid and registered vote into this election.
  related:
    - 'Election::getVotesList'
    - 'Election::countValidVoteWithConstraints'
  publish: true

-
  class: Election
  type: method
  visibility: public
  name: countInvalidVoteWithConstraints
  static: false
  description: |
    Count the number of actual invalid (if constraints functionality is enabled) but registered vote for this election.
  return_type: int
  return: |
    (int) Number of valid and registered vote into this election.
  related:
    - 'Election::countValidVoteWithConstraints'
    - 'Election::countVotes'
    - 'Election::sumVotesWeightWithConstraints'
  publish: true

-
  class: Election
  type: method
  visibility: public
  name: countValidVoteWithConstraints
  static: false
  description: |
    Count the number of actual registered and valid vote for this election. This method don't ignore votes constraints, only valid vote will be counted.
  return_type: int
  return: |
    (int) Number of valid and registered vote into this election.
  related:
    - 'Election::countInvalidVoteWithConstraints'
    - 'Election::countVotes'
    - 'Election::sumVotesWeightWithConstraints'
  publish: true

- 
  class: Election
  type: method
  visibility: public
  name: getCandidateObjectFromName
  static: false
  description: |
    Find candidate object by his string and return the candidate object.
  return_type: ?\CondorcetPHP\Condorcet\Candidate
  input:
    candidate:
      type: string
      required: true
      text: Candidate name.
  return: |
    Candidate object
  publish: true

- 
  class: Election
  type: method
  visibility: public
  name: getCandidatesList
  static: false
  description: |
    Return a list of registered Candidate into this election.
  return_type: array
  return: |
    (array) List of Candidate into an array.
  related:
    - 'Election::countCandidates'
  publish: true

- 
  class: Election
  type: method
  visibility: public
  name: getCandidatesListAsString
  static: false
  description: |
    Return a list of registered Candidate into this election.
  return_type: array
  return: |
    (array) List of Candidate into an array populated by strign instead CandidateObject.
  related:
    - 'Election::countCandidates'
  publish: true

- 
  class: Election
  type: method
  visibility: public
  name: getChecksum
  static: false
  description: |
    SHA-2 256 checksum of following internal data:        
    * Candidates
    * Votes list & tags
    * Computed data (pairwise, algorithm cache, stats)
    * Class version (major version like 0.14)    
    
    Can be powerfull to check integrity and security of an election. Or working with serialized object.

  return_type: string
  return: |
    (string) SHA-2 256 bits Hexadecimal

  examples:
    'Manual - Cryptographic Checksum': 'https://github.com/julien-boudry/Condorcet/wiki/III-%23-A.-Avanced-features---Configuration-%23-2.-Cryptographic-Checksum'
  publish: true

- 
  class: Election
  type: method
  visibility: public
  name: getConfig
  static: false
  description: |
    Get some config summary for this object
  return_type: array
  return: |
    An explicit array.
  related:
    - 'static Condorcet::isAuthMethod'
    - 'static Condorcet::getAuthMethods'
  publish: true

-
  class: Election
  type: method
  visibility: public
  name: getConstraints
  static: false
  description: |
    Get active constraints list.
  return_type: array
  return: |
    Array with class name of each active constraint. Empty array if there is not.
  related:
    - 'Election::clearConstraints'
    - 'Election::addConstraints'
    - 'Election::testIfVoteIsValidUnderElectionConstraints'
  examples:
    'Manual - Vote Constraints': 'https://github.com/julien-boudry/Condorcet/wiki/II-%23-C.-Result-%23-5.-Vote-Constraints'
  publish: true

- 
  class: Election
  type: method
  visibility: public
  name: getExplicitPairwise
  static: false
  description: |
    Return the Pairwise.
  return_type: array
  return: |
    Pairwise as an explicit array .
  related:
    - 'Election::getPairwise'
    - 'Election::getResult'
  publish: true

- 
  class: Election
  type: method
  visibility: public
  name: getGlobalTimer
  static: false
  description: |
    Returns the cumulated computation runtime of this object. Include only computation related methods.
  return_type: float
  return: |
    (Float) Timer
  related:
    - 'Election::getLastTimer'

  examples:
    'Manual - Timber benchmarking': 'https://github.com/julien-boudry/Condorcet/wiki/III-%23-A.-Avanced-features---Configuration-%23-1.-Timer-Benchmarking'
  publish: true

- 
  class: Election
  type: method
  visibility: public
  name: getLastTimer
  static: false
  description: |
    Return the last computation runtime (typically after a getResult() call.). Include only computation related methods.
  return_type: float
  return: |
    (Float) Timer
  related:
    - 'Election::getGlobalTimer'

  examples:
    'Manual - Timber benchmarking': 'https://github.com/julien-boudry/Condorcet/wiki/III-%23-A.-Avanced-features---Configuration-%23-1.-Timer-Benchmarking'
  publish: true

- 
  class: Election
  type: method
  visibility: public
  name: getLoser
  static: false
  description: |
    Get the natural Condorcet loser if there is one. Alternatively you can get the loser(s) from an advanced Condorcet algorithm.
  input:
    method:
      type: string
      default: 'null'
      nullable: true
      required: false
      text: |
        *Only if not null :*

        The loser will be provided by an advanced algorithm of an available advanced Condorcet method. For most of them, it will be the same as the Condorcet Marquis there. But if it does not exist, it may be different; and in some cases they may be multiple.

        If null, Natural Condorcet algorithm will be use.
  return_type: ?mixed
  return: |
    Candidate object given. Null if there are no available winner or loser.

    If you use an advanced method instead of Natural, you can get an array with multiples losers.

    Throw an exception on error.
  related:
    - 'Election::getWinner'
    - 'Election::getResult'

  examples:
    'Manual - Natural Condorcet': 'https://github.com/julien-boudry/Condorcet/wiki/II-%23-C.-Result-%23-1.-Natural-Condorcet'

  publish: true

-
  class: Election
  type: method
  visibility: public
  name: getObjectVersion
  static: false
  description: |
    Get the Condorcet PHP version who built this Election object. Usefull pour serializing Election.
  input:
    type:
      type: bool
      default: false
      required: false
      text: |
        * true will return : '2.0'
        * false will return : '2.0.0'
  return_type: string
  return: |
    *(string)* Condorcet PHP version.
  related:
    - 'static Condorcet::getVersion'
  publish: true

- 
  class: Election
  type: method
  visibility: public
  name: getPairwise
  static: false
  description: |
    Return the Pairwise.
  return_type: \CondorcetPHP\Condorcet\Algo\Pairwise
  return: |
    Pairwise object.
  related:
    - 'Election::getExplicitPairwise'
    - 'Election::getResult'

  examples:
    'Manual - Advanced Results': 'https://github.com/julien-boudry/Condorcet/wiki/II-%23-C.-Result-%23-4.-Advanced-Results-Management'
  publish: true

- 
  class: Election
  type: method
  visibility: public
  name: getImplicitRankingRule
  static: false
  description: |
    Returns the corresponding setting as currently set (True by default).
    If it is True then all votes expressing a partial ranking are understood as implicitly placing all the non-mentioned candidates exequos on a last rank.
    If it is false, then the candidates not ranked, are not taken into account at all.
  return_type: bool
  return: |
    (bool) True / False
  related:
    - 'Election::setImplicitRanking'
  publish: true

- 
  class: Election
  type: method
  visibility: public
  name: getResult
  static: false
  description: |
    Get a full ranking from an advanced Condorcet method.    
    *Have a look on the [supported method](https://github.com/julien-boudry/Condorcet/wiki/I-%23-Installation-%26-Basic-Configuration-%23-2.-Condorcet-Methods), or create [your own algorithm](https://github.com/julien-boudry/Condorcet/wiki/III-%23-C.-Extending-Condorcet-%23-1.-Add-your-own-ranking-algorithm).*
  input:
    method:
      type: string
      default: 'null'
      nullable: true
      required: false
      text: |
        Not requiered for use object default method. Set the string name of the algorithm for use an specific one.
    options:
      type: array
      default: '[]'
      required: false
  return_type: \CondorcetPHP\Condorcet\Result
  return: |
    An Condorcet/Result Object (implementing ArrayAccess and Iterator, can be use like an array ordered by rank)
  related:
    - 'Election::getWinner'
    - 'Election::getResult'
    - 'Condorcet::getDefaultMethod'
  examples:
    'Manual - Ranking from Condorcet Method': 'https://github.com/julien-boudry/Condorcet/wiki/II-%23-C.-Result-%23-2.-Get-Ranking-from-Condorcet-advanced-Methods'
  publish: true

- 
  class: Election
  type: method
  visibility: public
  name: getTimerManager
  static: false
  description: |
    Get the Timer manager object.
  return_type: CondorcetPHP\Condorcet\Timer\Manager
  return: |
    An CondorcetPHP\Condorcet\Timer\Manager object using by this election.
  related:
    - 'Election::getGlobalTimer'
    - 'Election::getLastTimer'
  publish: true

- 
  class: Election
  type: method
  visibility: public
  name: getVotesList
  static: false
  description: |
    Get registered vote list.
  input:
    tag:
      type: mixed
      default: test
      required: true
    with:
      type: mixed
      default: test
      required: true
  return_type: array
  return: |
    *(array)* Populated by each Vote object.
  related:
    - 'Election::countVotes'
    - 'Election::getVotesListAsString'
  publish: true

- 
  class: Election
  type: method
  visibility: public
  name: getVotesListGenerator
  static: false
  description: |
    Same as Election::getVotesList. But Return a PHP generator object.
    Usefull if your work on very large election with an external DataHandler, because it's will not using large memory amount.
  input:
    tag:
      type: mixed
      default: test
      required: true
    with:
      type: mixed
      default: test
      required: true
  return_type: \Generator
  return: |
    *(\Generator)* Populated by each Vote object.
  related:
    - 'Election::getVotesList'
  publish: true

- 
  class: Election
  type: method
  visibility: public
  name: getVotesListAsString
  static: false
  description: |
    Get registered vote list.
  return_type: string
  return: |
    *(string)* Return a string like :<br>
    A > B > C * 3<br>
    A = B > C * 6
  related:
    - 'Election::parseVotes'
  publish: true

- 
  class: Election
  type: method
  visibility: public
  name: isVoteWeightAllowed
  static: false
  description: |
    Returns the corresponding setting as currently set (False by default).
    If it is True then votes vote optionally can use weight otherwise (if false) all votes will be evaluated as equal for this election.
  return_type: bool
  return: |
    (bool) True / False
  related:
    - 'Election::allowVoteWeight'
  publish: true

- 
  class: Election
  type: method
  visibility: public
  name: getWinner
  static: false
  description: |
    Get the natural Condorcet winner if there is one. Alternatively you can get the winner(s) from an advanced Condorcet algorithm.
  input:
    method:
      type: string
      default: 'null'
      nullable: true
      required: false
      text: |
        *Only if not null :*

        The winner will be provided by an advanced algorithm of an available advanced Condorcet method. For most of them, it will be the same as the Condorcet Marquis there. But if it does not exist, it may be different; and in some cases they may be multiple.

        If null, Natural Condorcet algorithm will be use.
  return_type: ?mixed
  return: |
    Candidate object given. Null if there are no available winner or loser.

    If you use an advanced method instead of Natural, you can get an array with multiples winners.

    Throw an exception on error.
  related:
    - 'Election::getLoser'
    - 'Election::getResult'

  examples:
    'Manual - Natural Condorcet': 'https://github.com/julien-boudry/Condorcet/wiki/II-%23-C.-Result-%23-1.-Natural-Condorcet'

  publish: true

- 
  class: Election
  type: method
  visibility: public
  name: addCandidatesFromJson
  static: false
  description: |
    Import candidate from a Json source.
  input:
    input:
      type: string
      required: true
      text: Json string input.
  return_type: array
  return: |
    *(array)* List of new registered candidate object.
  related:
    - 'Election::addCandidate'
    - 'Election::parseCandidates'
    - 'Election::addVotesFromJson'
  examples:
    'Manual - Manage Candidates': 'https://github.com/julien-boudry/Condorcet/wiki/II-%23-A.-Create-an-Election-%23-2.-Create-Candidates'
  publish: true

- 
  class: Election
  type: method
  visibility: public
  name: addVotesFromJson
  static: false
  description: |
    Import votes from a Json source.
  input:
    input:
      type: string
      required: true
      text: Json string input.
  return_type: array
  return: |
    *(array)* List of new registered vote object.
  related:
    - 'Election::addVote'
    - 'Election::parseVotes'
    - 'Election::addCandidatesFromJson'
  examples:
    'Manual - Add Vote': 'https://github.com/julien-boudry/Condorcet/wiki/II-%23-B.-Vote-management-%23-1.-Add-Vote'
  publish: true

- 
  class: Election
  type: method
  visibility: public
  name: parseCandidates
  static: false
  description: |
    Import candidate from a text source.
  input:
    input:
      type: string
      required: true
      text: String or valid path to a text file.
    isFile:
      type: bool
      required: true
      text: If true, the input is evalatued as path to text file.
  return_type: array
  return: |
    *(array)* List of new registered candidate object. Count it for checking if all candidates have been correctly registered.
  related:
    - 'Election::addCandidate'
    - 'Election::addCandidatesFromJson'
    - 'Election::parseVotes'
  examples:
    'Manual - Manage Candidates': 'https://github.com/julien-boudry/Condorcet/wiki/II-%23-A.-Create-an-Election-%23-2.-Create-Candidates'
  publish: true

- 
  class: Election
  type: method
  visibility: public
  name: parseVotes
  static: false
  description: |
    Import votes from a text source.
  input:
    input:
      type: string
      required: true
      text: String or valid path to a text file.
    isFile:
      type: bool
      required: true
      text: If true, the input is evalatued as path to text file.
  return_type: array
  return: |
    *(array)* List of new registered vote object. Count it for checking if all candidates have been correctly registered.
  related:
    - 'Election::addVote'
    - 'Election::parseCandidates'
    - 'Election::addVotesFromJson'
  examples:
    'Manual - Add Vote': 'https://github.com/julien-boudry/Condorcet/wiki/II-%23-B.-Vote-management-%23-1.-Add-Vote'
  publish: true

- 
  class: Election
  type: method
  visibility: public
  name: removeCandidate
  static: false
  description: |
    Remove Candidate from an election.   

    *Please note: You can't remove candidate after the first vote. Exception will be throw.*
  input:
    candidate:
      type: mixed
      required: true
      text: |
          * String matching Candidate Name    
          * CondorcetPHP\Condorcet\Candidate object    
          * Array populated by CondorcetPHP\Condorcet\Candidate    
          * Array populated by string matching Candidate name   
  return_type: array
  return: |
    *(array)* List of removed CondorcetPHP\Condorcet\Candidate object.
  related:
    - 'Election::addCandidate'
    - 'Election::getCandidatesList'
  examples:
    'Manual - Manage Candidate': 'https://github.com/julien-boudry/Condorcet/wiki/II-%23-A.-Create-an-Election-%23-2.-Create-Candidates'
  publish: true

- 
  class: Election
  type: method
  visibility: public
  name: removeExternalDataHandler
  static: false
  description: |
    Remove an external driver to store vote on very large election. And import his data into classical memory.
  return_type: bool
  return: |
    *(bool)* True if success. Else throw an Exception.
  related:
    - 'Election::setExternalDataHandler'
  publish: true

- 
  class: Election
  type: method
  visibility: public
  name: removeVote
  static: false
  description: |
    Remove Vote from an election.   

    ```php
    $condorcet->removeVote('Charlie') ; // Remove vote(s) with tag Charlie
    $condorcet->removeVote('Charlie', false) ; // Remove votes without tag Charlie
    $condorcet->removeVote('Charlie, Julien', false) ; // Remove votes without tag Charlie AND without tag Julien.
    $condorcet->removeVote(array('Julien','Charlie')) ; // Remove votes with tag Charlie OR with tag Julien.
    $condorcet->removeVote($myVoteObject) ; // Remove a specific registered Vote.
    ```
  input:
    vote:
      type: CondorcetPHP\Condorcet\Vote
      required: true      
  return_type: array 
  return: |
    *(array)* List of removed CondorcetPHP\Condorcet\Vote object.
  related:
    - 'Election::addVote'
    - 'Election::getVotesList'
    - 'Election::removeVotesByTags'
  examples:
    'Manual - Vote management': 'https://github.com/julien-boudry/Condorcet/wiki/II-%23-B.-Vote-management-%23-2.-Manage-Vote'
  publish: true

- 
  class: Election
  type: method
  visibility: public
  name: removeVotesByTags
  static: false
  description: |
    Remove Vote from an election using tags.   

    ```php
    $condorcet->removeVotesByTags('Charlie') ; // Remove vote(s) with tag Charlie
    $condorcet->removeVotesByTags('Charlie', false) ; // Remove votes without tag Charlie
    $condorcet->removeVotesByTags('Charlie, Julien', false) ; // Remove votes without tag Charlie AND without tag Julien.
    $condorcet->removeVotesByTags(array('Julien','Charlie')) ; // Remove votes with tag Charlie OR with tag Julien.
    ```
  input:
    tags:
      type: mixed
      required: true         
    with:
      type: mixed
      required: false
      default: true
  return_type: array
  return: |
    *(array)* List of removed CondorcetPHP\Condorcet\Vote object.
  related:
    - 'Election::addVote'
    - 'Election::getVotesList'
    - 'Election::removeVote'
  examples:
    'Manual - Vote management': 'https://github.com/julien-boudry/Condorcet/wiki/II-%23-B.-Vote-management-%23-2.-Manage-Vote'
  publish: true

- 
  class: Election
  type: method
  visibility: public
  name: setExternalDataHandler
  static: false
  description: |
    Import and enable an external driver to store vote on very large election.
  input:
    driver:
      type: CondorcetPHP\Condorcet\DataManager\DataHandlerDrivers\DataHandlerDriverInterface
      required: true
  return_type: bool
  return: |
    *(bool)* True if success. Else throw an Exception.
  related:
    - 'Election::removeExternalDataHandler'
  examples:
    '[Manual - DataHandler]': 'https://github.com/julien-boudry/Condorcet/blob/master/examples/specifics_examples/use_large_election_external_database_drivers.php'
  publish: true

- 
  class: Election
  type: method
  visibility: public
  name: setMaxParseIteration
  static: true
  description: |
    Maximum input for each use of Election::parseCandidate && Election::parseVote. Will throw an exception if exceeded.
  input:
    param1:
      type: mixed
      required: true
      text: 'Null will desactivate this functionnality. Else, enter an integer.'
  return_type: ?int
  return: |
    *(int or null)* The new limit.
  related:
    - 'static Election::setMaxVoteNumber'
  publish: true

- 
  class: Election
  type: method
  visibility: public
  name: setMaxVoteNumber
  static: true
  description: |
    Add a limitation on Election::addVote and related methods. You can't add new vote y the number of registered vote is equall ou superior of this limit.
  input:
    value:
      type: mixed
      required: true
      text: Null will desactivate this functionnality. An interger will fix the limit.
  return_type: ?int
  return: |
    *(int or null)* The new limit.
  related:
    - 'static Election::setMaxParseIteration'
  publish: true

- 
  class: Election
  type: method
  visibility: public
  name: setImplicitRanking
  static: false
  description: |
    Set the setting and reset all result data.
    If it is True then all votes expressing a partial ranking are understood as implicitly placing all the non-mentioned candidates exequos on a last rank.
    If it is false, then the candidates not ranked, are not taken into account at all.
  input:
    rule:
      type: bool
      default: true
      required: true
      text: New rule.
  return_type: bool
  return: |
    Return True
  related:
    - 'Election::getImplicitRankingRule'
  publish: true

-
  class: Election
  type: method
  visibility: public
  name: sumVotesWeight
  static: false
  description: |
    Sum total votes weight in this election. If vote weight functionality is disable (default setting), it will return the number of registered votes. This method ignore votes constraints.
  return_type: int
  return: |
    (Int) Total vote weight
  related:
    - 'Election::sumValidVotesWeightWithConstraints'
  publish: true

-
  class: Election
  type: method
  visibility: public
  name: sumVotesWeightWithConstraints
  static: false
  description: |
    Sum total votes weight in this election. If vote weight functionality is disable (default setting), it will return the number of registered votes. This method don't ignore votes constraints, only valid vote will be counted.
  return_type: int
  return: |
    (Int) Total vote weight
  related:
    - 'Election::sumValidVotesWeightWithConstraints'
    - 'Election::countValidVoteWithConstraints'
    - 'Election::countInvalidVoteWithConstraints'
  publish: true

-
  class: Election
  type: method
  visibility: public
  name: testIfVoteIsValidUnderElectionConstraints
  static: false
  description: |
    Test if a vote is valid with these election constraints.
  input:
    vote:
      type: CondorcetPHP\Condorcet\Vote
      required: true
      text: A vote. Not necessarily registered in this election.
  return_type: bool
  return: |
    Return True if vote will pass the constraints rules, else False.
  related:
    - 'Election::getConstraints'
    - 'Election::addConstraints'
    - 'Election::clearConstraints'
  examples:
    'Manual - Vote Constraints': 'https://github.com/julien-boudry/Condorcet/wiki/II-%23-C.-Result-%23-5.-Vote-Constraints'
  publish: true


# CLASS CANDIDATE


- 
  class: Candidate
  type: method
  visibility: public
  name: __construct
  static: false
  description: |
    Build a candidate.
  input:
    param1:
      type: string
      required: true
      text: Candidate Name
  return: |
    
  related:
    - 'Candidate::setName'
  examples:
    'Manual - Create Candidates': 'https://github.com/julien-boudry/Condorcet/wiki/II-%23-A.-Create-an-Election-%23-2.-Create-Candidates'
  publish: true


- 
  class: Candidate
  type: method
  visibility: public
  name: getCreateTimestamp
  static: false
  description: |
    Get the timestamp corresponding of the creation of this candidate.
  return_type: float
  return: |
    *(float)* Timestamp
  related:
    - 'Candidate::getTimestamp'
  publish: true

- 
  class: Candidate
  type: method
  visibility: public
  name: getTimestamp
  static: false
  description: |
    Get the timestamp corresponding of the last namming change.
  return_type: float
  return: |
    *(float)* Timestamp
  related:
    - 'Candidate::getCreateTimestamp'
  publish: true

- 
  class: Candidate
  type: method
  visibility: public
  name: getHistory
  static: false
  description: |
    Return an history of each namming change, with timestamp.
  return_type: array
  return: |
    *(array)* An explicit multi-dimenssional array.
  related:
    - 'Candidate::getCreateTimestamp'
  publish: true

- 
  class: Candidate
  type: method
  visibility: public
  name: getName
  static: false
  description: |
    Get the candidate name.
  return_type: string
  return: |
    *(string)* Candidate name.
  related:
    - 'Candidate::getHistory'
    - 'Candidate::setName'
  publish: true

- 
  class: Candidate
  type: method
  visibility: public
  name: setName
  static: false
  description: |
    Change the candidate name.   
    *If this will not cause conflicts if the candidate is already participating in elections and would namesake. This situation will throw an exception.*
  input:
    name:
      type: string
      required: true
      text: Candidate Name
  return_type: bool
  return: |
    *(bool)* In case of success, return TRUE
  publish: true



# CLASS VOTE


- 
  class: Vote
  type: method
  visibility: public
  name: __construct
  static: false
  description: |
    Build a vote object.
  input:
    ranking:
      type: mixed
      required: true
      text: Equivalent to Vote::setRanking method.
    tags:
      type: mixed
      default: 'null'
      required: false
      text: Equivalent to Vote::addTags method.
    timestamp:
      type: numeric
      default: 'null'
      required: false
      text: Set your own timestamp metadata on Ranking.
  return: |
    _None_
  related:
    - 'Vote::setRanking'
    - 'Vote::addTags'

  examples:
    'Manual - Add Vote': 'https://github.com/julien-boudry/Condorcet/wiki/II-%23-B.-Vote-management-%23-1.-Add-Vote'
  publish: true

- 
  class: Vote
  type: method
  visibility: public
  name: addTags
  static: false
  description: |
    Add tag(s) on this Vote.
  input:
    tags:
      type: mixed
      required: true
      text: Tag(s) are non-numeric alphanumeric string. They can be added by string separated by commas or an array.
  return_type: bool
  return: |
    In case of success, return TRUE
  related:
    - 'Vote::removeTags'
  examples:
    'Manual - Add Vote': 'https://github.com/julien-boudry/Condorcet/wiki/II-%23-B.-Vote-management-%23-1.-Add-Vote'
  publish: true

- 
  class: Vote
  type: method
  visibility: public
  name: removeTags
  static: false
  description: |
    Remove registered tag(s) on this Vote.
  input:
    tags:
      type: mixed
      required: true
      text: They can be added by string separated by commas or an array.
  return_type: array
  return: |
    *(array)* List of deleted tags.
  related:
    - 'Vote::addTags'
  examples:
    'Manual - Add Vote': 'https://github.com/julien-boudry/Condorcet/wiki/II-%23-B.-Vote-management-%23-1.-Add-Vote'
  publish: true

- 
  class: Vote
  type: method
  visibility: public
  name: removeAllTags
  static: false
  description: |
    Remove all registered tag(s) on this Vote.
  return_type: bool
  return: |
    *(bool)* Return True.
  related:
    - 'Vote::addTags'
    - 'Vote::removeTags'
  publish: true

- 
  class: Vote
  type: method
  visibility: public
  name: countRankingCandidates
  static: false
  description: |
    Count the number of candidate provide into the active Ranking set.
  return_type: int
  return: |
    *(int)* Number of Candidate into ranking.
  publish: true

- 
  class: Vote
  type: method
  visibility: public
  name: getAllCandidates
  static: false
  description: |
    Get all the candidates object set in the last ranking of this Vote.
  return_type: array
  return: |
    *(array)* Candidates list.
  related:
    - 'Vote::getRanking'
    - 'Vote::countRankingCandidates'
  publish: true

- 
  class: Vote
  type: method
  visibility: public
  name: getContextualRanking
  static: false
  description: |
    Return the vote actual ranking complete for the contexte of the provide election. Election must be linked to the Vote object.
  input:
    election:
      type: CondorcetPHP\Condorcet\Election
      required: true
      text: An election is already linked to Vote.
  return_type: array
  return: |
    *(array)* Contextual full ranking.
  related:
    - 'Vote::getContextualRankingAsString'
    - 'Vote::getRanking'
  publish: true

- 
  class: Vote
  type: method
  visibility: public
  name: getContextualRankingAsString
  static: false
  description: |
    Return the vote actual ranking complete for the contexte of the provide election. Election must be linked to the Vote object.
  input:
    election:
      type: CondorcetPHP\Condorcet\Election
      required: true
      text: An election is already linked to Vote.
  return_type: array
  return: |
    *(array)* Contextual full ranking, with string instead Candidate object.
  related:
    - 'Vote::getContextualRanking'
    - 'Vote::getRanking'
  publish: true

- 
  class: Vote
  type: method
  visibility: public
  name: getCreateTimestamp
  static: false
  description: |
    Get the timestamp corresponding of the creation of this vote.
  return_type: float
  return: |
    *(float)* Timestamp
  related:
    - 'Candidate::getTimestamp'
  publish: true

- 
  class: Vote
  type: method
  visibility: public
  name: getTimestamp
  static: false
  description: |
    Get the timestamp corresponding of the last vote change.
  return_type: float
  return: |
    *(float)* Timestamp
  related:
    - 'Vote::getCreateTimestamp'
  publish: true

- 
  class: Vote
  type: method
  visibility: public
  name: getHistory
  static: false
  description: |
    Return an history of each vote change, with timestamp.
  return_type: array
  return: |
    *(array)* An explicit multi-dimenssional array.
  related:
    - 'Vote::getCreateTimestamp'
  publish: true

- 
  class: Vote
  type: method
  visibility: public
  name: getRanking
  static: false
  description: |
    Get the actual Ranking of this Vote.
  return_type: array
  return: |
    *(array)* Multidimenssionnal array populated by Candidate object.
  related:
    - 'Vote::setRanking'
  publish: true

- 
  class: Vote
  type: method
  visibility: public
  name: getSimpleRanking
  static: false
  description: |
    Get the current ranking as a string format.
  return_type: string
  return: |
    *(string)* String like 'A>D=C>B'
  related:
    - 'Vote::getRanking'
  publish: true 

- 
  class: Vote
  type: method
  visibility: public
  name: getTags
  static: false
  description: |
    Get the registered tags for this Vote.
  return_type: array
  return: |
    *(array)* List of registered tag.
  related:
    - 'Vote::addTags'
    - 'Vote::removeTags'

  publish: true

- 
  class: Vote
  type: method
  visibility: public
  name: setRanking
  static: false
  description: |
    Set a new ranking for this vote.    

    Note that if your vote is already linked to one ore more elections, your ranking must be compliant with all of them, else an exception is throw. For do this, you need to use only valid Candidate object, you can't register a new ranking from string if your vote is already linked to an election.
  input:
    ranking:
      type: mixed
      required: true
      text: |
        * Ranking can be add by string like "A > B = C > D" (by candidate string name)
        * Multidimensionnal array like :
           ```php
           array( $candidate1, [$candidate2,$candidate4], $candidate 3 )
           ```
        * Multidimensionnal array with string :
           ```php
           array( 'candidate1Name', ['candidate2Name','candidate4Name'], 'candidate3Name' )
           ```
        * Or combine the 2 last ways.     

        Note: You can't use string candidate name if your vote is already linked to an election (by Election::addVote).

    timestamp:
      type: numeric
      default: 'null'
      required: false
      text: 'Set your own timestamp metadata on Ranking. Your timestamp must be > than last registered timestamp. Else, an exception will be throw.'
  return_type: bool
  return: |
    In case of success, return TRUE
  related:
    - 'Vote::getRanking'
    - 'Vote::getHistory'
    - 'Vote::__construct'

  examples:
    'Manual - Add a vote': 'https://github.com/julien-boudry/Condorcet/wiki/II-%23-B.-Vote-management-%23-1.-Add-Vote'

  publish: true


# CLASS PAIRWISE


- 
  class: Algo\Pairwise
  type: method
  visibility: public
  name: getExplicitPairwise
  static: false
  description: |
    Get an explicit pairwise.
  return_type: array
  return: |
    An explicit array with candidate name as key.
  related:
    - 'Election::getPairwise'
  publish: true


# CLASS TIMER/MANAGER

- 
  class: Timer\Manager
  type: method
  visibility: public
  name: getHistory
  static: false
  description: |
    Return benchmarked actions history.
  return_type: array
  return: |
    An explicit array with history.
  related:
    - 'Election::getTimerManager'
  publish: true


# CLASS RESULT


- 
  class: Result
  type: method
  visibility: public
  name: getStats
  static: false
  description: |
    Get advanced computing data from used algorithm. Like Strongest paths for Schulze method.
  return_type: ?mixed
  return: |
    Varying according to the algorithm used.
  related:
    - 'Election::getResult'
  examples:
    'Advanced Result Management': 'https://github.com/julien-boudry/Condorcet/wiki/II-%23-C.-Result-%23-3.-Advanced-Results-Management'
  publish: true


- 
  class: Result
  type: method
  visibility: public
  name: getResultAsArray
  static: false
  description: |
    Get result as an array
  input:
    convertToString:
      type: bool
      default: false
      required: false
      text: 'Convert Candidate object to string'
  return_type: array
  return: |
    An ordered multidimensionnal array by rank.
  related:
    - 'Election::getResult'
    - 'Result::getResultAsString'
  publish: true

- 
  class: Result
  type: method
  visibility: public
  name: getResultAsString
  static: false
  description: |
    Get result as string
  return_type: string
  return: |
    (string) Result ranking as string.
  related:
    - 'Election::getResult'
    - 'Result::getResultAsArray'
  publish: true

- 
  class: Result
  type: method
  visibility: public
  name: getWinner
  static: false
  description: |
    Equivalent to [Condorcet/Election::getWinner($method)](../Election Class/public Election--getWinner.md).
  return_type: ?mixed
  return: |
    Candidate object given. Null if there are no available winner.
    You can get an array with multiples winners.
  related:
    - 'Result::getLoser'
    - 'Election::getWinner'
  publish: true

- 
  class: Result
  type: method
  visibility: public
  name: getLoser
  static: false
  description: |
    Equivalent to [Condorcet/Election::getWinner($method)](../Election Class/public Election--getWinner.md).
  return_type: ?mixed
  return: |
    Candidate object given. Null if there are no available loser.
    You can get an array with multiples losers.
  related:
    - 'Result::getWinner'
    - 'Election::getLoser'
  publish: true

- 
  class: Result
  type: method
  visibility: public
  name: getCondorcetWinner
  static: false
  description: |
    Get the Condorcet winner, if exist, at the result time.
  return_type: ?\CondorcetPHP\Condorcet\Candidate
  return: |
    CondorcetPHP\Condorcet\Candidate object if there is a Condorcet winner or NULL instead.
  related:
    - 'Result::getCondorcetLoser'
    - 'Election::getWinner'
  publish: true


- 
  class: Result
  type: method
  visibility: public
  name: getCondorcetLoser
  static: false
  description: |
    Get the Condorcet loser, if exist, at the result time.
  return_type: ?\CondorcetPHP\Condorcet\Candidate
  return: |
    Condorcet/Candidate object if there is a Condorcet loser or NULL instead.
  related:
    - 'Result::getCondorcetWinner'
    - 'Election::getLoser'
  publish: true


- 
  class: Result
  type: method
  visibility: public
  name: getMethod
  static: false
  description: |
    Get the The algorithmic method used for this result.
  return_type: string
  return: |
    (string) Method name.
  related:
    - 'Result::getClassGenerator'
  publish: true


- 
  class: Result
  type: method
  visibility: public
  name: getClassGenerator
  static: false
  description: |
    Get the The algorithmic method used for this result.
  return_type: string
  return: |
    (string) Method class path like CondorcetPHP\Condorcet\Algo\Methods\Copeland
  related:
    - 'Result::getMethod'
  publish: true


- 
  class: Result
  type: method
  visibility: public
  name: getBuildTimeStamp
  static: false
  description: |
    Get the timestamp of this result.
  return_type: float
  return: |
    (float) Microsecond timestamp.
  publish: true


- 
  class: Result
  type: method
  visibility: public
  name: getCondorcetElectionGeneratorVersion
  static: false
  description: |
    Get the Condorcet PHP version that build this Result.
  return_type: float
  return: |
    (string) Condorcet PHP version string format.
  publish: true


# CLASS CONDORCETUTIL

- 
  class: CondorcetUtil
  type: method
  visibility: public
  name: format
  static: true
  description: |
    Provide pretty re-formatting, human compliant, of all Condorcet PHP object or result set.
    Can be use for improve var_dump, or just to get more simple data output.
  input:
    input:
      type: mixed
      required: true
      text: All datatype. Like classical var_dump
    out:
      type: bool
      default: true
      required: false
      text: 'If true, will print the result on scrren. like var_dump() function. Else, just return it.'
    convertObject:
      type: bool
      default: true
      required: false
      text: If true. Will convert Candidate objects into string representation of their name.
  return_type: ?mixed
  return: |
    New formatted data.
  publish: true